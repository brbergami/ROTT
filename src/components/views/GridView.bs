import "pkg:/utils.bs"
const OMDB_API_URL = getConfigVar("apiConfig.OMDB.API")
const OMDB_API_KEY = getConfigVar("apiConfig.OMDB.API_KEY")

sub init()
    m.top.id = "GridView"
    m.lastTextInput = ""
    bindComponents()
    hookObservers()
    setStyles()
end sub

sub bindComponents()
    m.titleLabel = m.top.findNode("titleLabel")
    m.descriptionLabel = m.top.findNode("descriptionLabel")
    m.keyboard = m.top.findNode("keyboard")
    m.posterGrid = m.top.findNode("posterGrid")
    m.gridInfoLabel = m.top.findNode("gridInfoLabel")
    m.keyboardTimer = m.top.findNode("keyboardTimer")
    m.requestsTask = createObject("roSGNode", "RequestsTask")
end sub

sub hookObservers()
    m.top.observeField("visible", "onVisibleChange")
    m.keyboard.observeField("text", "onKeyboardTextChange")
    m.posterGrid.observeField("itemSelected", "onItemSelected")
    m.requestsTask.observeField("response", "onSearchResponse")
end sub

sub setStyles()
    m.titleLabel.translation = [ 120, 100 ]
    m.titleLabel.font  = createObject("roSGNode", "Font")
    m.titleLabel.font.uri = "pkg:/fonts/Gotham-Bold.otf"
    m.titleLabel.font.size = 36
    m.titleLabel.text = "Movies, series and episodes!"

    m.descriptionLabel.translation = [ 120, 160 ]
    m.descriptionLabel.font  = createObject("roSGNode", "Font")
    m.descriptionLabel.font.uri = "pkg:/fonts/Gotham-Book.otf"
    m.descriptionLabel.font.size = 20
    m.descriptionLabel.text = "Search for content info using OMDB database. You need a valid API key to use their service in this view."

    ' VoiceTextEditBox
    ' Check if a voice keyboard can be integrated or it's pointless with the MiniKeyboard + RC VoiceOver

    m.keyboard.translation = [ 100, 250 ]
    keyboardFont = createObject("roSGNode", "Font")
    keyboardFont.uri = "pkg:/fonts/Gotham-Book.otf"
    keyboardFont.size = 34
    m.keyboard.textEditBox.getChildren(-1, 0)[1]["font"] = keyboardFont
    m.keyboard.textEditBox.hintText = "Start typing here"

    m.posterGrid.visible = false
    m.posterGrid.translation = [ 750, 260 ]
    m.posterGrid.posterDisplayMode = "scaleToZoom"
    m.posterGrid.basePosterSize = [ 240, 300 ]
    m.posterGrid.itemSpacing = [ 32, 32 ]
    m.posterGrid.numColumns = 4
    m.posterGrid.numRows = 3

    m.gridInfoLabel.translation = [ 1200, 540 ]
    m.gridInfoLabel.font  = createObject("roSGNode", "Font")
    m.gridInfoLabel.font.uri = "pkg:/fonts/Gotham-Book.otf"
    m.gridInfoLabel.font.size = 30
    m.gridInfoLabel.text = "No results available"

    m.keyboardTimer.duration = 3

    m.keyboard.setFocus(true)
end sub

sub onVisibleChange(event as Object)
    isVisible = event.getData()
    if isVisible then m.posterGrid.setFocus(true)
end sub

sub onKeyboardTextChange(event as Object)
    m.textInput = event.getData()
    m.keyboardTimer.control = "start" ' Define if and where should stop
    m.keyboardTimer.observeField("fire", "onTimerFinished")
end sub

sub onTimerFinished()
    m.keyboardTimer.control = "stop"
    if len(m.textInput) < 5 ' Less returns too many results for this API
        m.posterGrid.visible = false
        return
    end if
    requestGridContent(m.textInput) ' Add mechanism with variable to compare if the search is repeated
end sub

sub requestGridContent(inputText as String)
    m.requestsTask.request = {
        method: "GET"
        url: OMDB_API_URL
        params: {
            apikey: OMDB_API_KEY
            s: inputText
        }
    }
    m.requestsTask.control = "run"
end sub

sub onSearchResponse(event as Object)
    response = event.getData()
    ' if response?.responseCode <> 200 ' This should be kinda unified with responseError in order to update m.gridInfoLabel
    '     print `ROTT Error: Component ${m.top.id} : OMDB Request : Response code ${response.responseCode}`
    '     return
    ' end if
    responseContent = createObject("roSGNode", "ContentNode")
    if response.responseBody.response = "True"
        for each item in response.responseBody.search
            nodeItem = createObject("roSGNode", "ContentNode")
            nodeItem.update({
                imdbid: item.imdbid
                contentType: item.type
                title: item.title
                hdPosterUrl: item.poster
            }, true)
            responseContent.appendChild(nodeItem)
        end for
        m.posterGrid.content = responseContent
        m.gridInfoLabel.visible = false
        m.posterGrid.visible = true
        m.posterGrid.setFocus(true)
    else
        m.posterGrid.visible = false
        responseError = response.responseBody.responseError
        m.gridInfoLabel.text = responseError
        m.gridInfoLabel.visible = true
        print `ROTT Error: Component ${m.top.id} : OMDB Request : Response error ${responseError}`
    end if
end sub

sub onItemSelected(event as Object)
    selectedChildIndex = event.getData()
    child = m.posterGrid.content.getChild(selectedChildIndex)
    m.top.imdbidSelected = child.imdbid
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    if not press then return false
    if  key = "back"
        m.top.close = true
        return true
    else if key = "left"
        if m.posterGrid.currFocusColumn = 0
            m.keyboard.setFocus(true)
        end if
        return true
    else if key = "right"
    else if key = "up"
        ' return true
    else if key = "down"
        ' return true
    end if
    return false
end function
