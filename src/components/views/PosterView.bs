import "pkg:/utils.bs"
const OMDB_API_URL = getConfigVar("apiConfig.OMDB.API")
const OMDB_API_KEY = getConfigVar("apiConfig.OMDB.API_KEY")

sub init()
    m.top.id = "PosterView"
    bindComponents()
    hookObservers()
    setStyles()
    ' Handle the m.top.content to display
end sub

sub bindComponents()
    m.poster = m.top.findNode("poster")
    m.divider = m.top.findNode("divider")
    m.secondHalfGroup = m.top.findNode("secondHalfGroup")
    m.contentTitle = m.top.findNode("contentTitle")
    m.contentYear = m.top.findNode("contentYear")
    m.contentDescription = m.top.findNode("contentDescription")
    m.requestsTask = createObject("roSGNode", "RequestsTask")
end sub

sub hookObservers()
    m.top.observeField("imdbid", "requestTitleDetails")
    m.requestsTask.observeField("response", "onTitleResponse")
end sub

sub setStyles()
    sqMarginSmall = 90
    sqMarginBig = sqMarginSmall * 2
    ' Should set some rules here to make it play well taking display
    ' size and using rule of three to calculate the sizes

    ' TBD: Create a mask for the posters, maybe..
    m.poster.translation = [ sqMarginBig, sqMarginBig ]
    m.poster.width = 640
    m.poster.height = 960
    m.poster.loadDisplayMode = "scaleToZoom"

    m.divider.translation = [ 959, sqMarginBig ]
    m.divider.width = 2 ' Should be even to make it symmetrical in position
    m.divider.height = 960
    m.divider.color = "0xD3D3D3FF"

    m.secondHalfGroup.translation = [ 1066, 100 ]
    m.secondHalfGroup.clippingRect = [ sqMarginSmall, sqMarginSmall, m.poster.width-sqMarginSmall, m.poster.height-sqMarginSmall ]
    m.secondHalfGroup.itemSpacings = [ 27 ] ' Check if only for the vertical placement is ok

    m.contentTitle.translation = [ sqMarginBig, sqMarginBig ]
    m.contentTitle.width = 426
    m.contentTitle.font = "font:MediumBoldSystemFont"

    m.contentYear.translation = [ sqMarginBig, 120 ]
    m.contentYear.width = 426
    m.contentYear.font = "font:LargeBoldSystemFont"

    m.contentDescription.translation = [ sqMarginBig, 150 ]
    m.contentDescription.width = 426
    m.contentDescription.height = 491
    m.contentDescription.font = "font:SmallSystemFont"
    m.contentDescription.ellipsizeOnBoundary = true
    m.contentDescription.wrap = true
    m.contentDescription.maxWidth = 384
end sub

sub requestTitleDetails(event as Object)
    imdbid = event.getData()
    m.requestsTask.request = {
        method: "GET"
        url: OMDB_API_URL
        params: {
            apikey: OMDB_API_KEY
            i: imdbid
            plot: "full"
        }
    }
    m.requestsTask.control = "run"
end sub

sub onTitleResponse(event as Object)
    m.requestsTask.control = "stop"
    response = event.getData()
    responseBody = response.responseBody
    if responseBody.response = "False"
        print `ROTT Error: Component ${m.top.id} : OMDB Request : Response error ${responseBody["Error"]}`
        return
    end if
    m.poster.uri = responseBody["Poster"]
    m.contentTitle.text = responseBody["Title"]
    m.contentYear.text = responseBody["Year"]
    m.contentDescription.text = responseBody["Plot"]
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    if not press then return false
    if key = "back"
        m.top.close = true
        return true
    end if
    return false
end function
